template: true
valuesFilePath: ./values.yml

resources:
  - name: go_app_gitrepo
    type: GitRepo
    configuration:
      path: {{ .Values.repoPath }}
      gitProvider: {{ .Values.gitIntegration }}
      branches:
        include: ^{{ .Values.mainBranch }}$
      cloneProtocol: https

  - name: docker_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.artIntegration }}

  - name: xray_scan_info
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.artIntegration }}

  - name: go_build_gitrepo
    type: GitRepo
    configuration:
      path: bhanurp/go-build
      gitProvider: {{ .Values.gitIntegration }}
      branches:
        include: ^{{ .Values.mainBranch }}$
      cloneProtocol: https
      buildOn:
        commit: true

  - name: go_build_publish_gitrepo
    type: GitRepo
    configuration:
      path: bhanurp/build-publish
      gitProvider: {{ .Values.gitIntegration }}
      branches:
        include: main
      cloneProtocol: https
      buildOn:
        commit: true

  - name: go_publish_gitrepo
    type: GitRepo
    configuration:
      path: bhanurp/go-publish
      gitProvider: {{ .Values.gitIntegration }}
      branches:
        include: ^{{ .Values.mainBranch }}$
      cloneProtocol: https
      buildOn:
        commit: true

  - name: xrayScanTask
    type: GitRepo
    configuration:
      path: bhanurp/xray_scan
      gitProvider: {{ .Values.gitIntegration }}
      branches:
        include: ^{{ .Values.mainBranch }}$
      cloneProtocol: https
      buildOn:
        commit: true

  - name: saveCache
    type: GitRepo
    configuration:
      path: bhanurp/save-cache
      gitProvider: {{ .Values.gitIntegration }}
      branches:
        include: ^{{ .Values.mainBranch }}$
      cloneProtocol: https
      buildOn:
        commit: true

  - name: retrieveCache
    type: GitRepo
    configuration:
      path: bhanurp/retrieve-cache
      gitProvider: {{ .Values.gitIntegration }}
      branches:
        include: ^{{ .Values.mainBranch }}$
      cloneProtocol: https
      buildOn:
        commit: true

pipelines:
  - name: go_app
    configuration:
      jfrogCliVersion: 2
      environmentVariables:
        readOnly:
          TASK_NAME: docker_build
          TASK_VERSION: 0.0.1
          TASK_REPOSITORY: pipelines-tasks-local
          JFROG_TASK_DEBUG: "true"
          JFROG_CLI_LOG_LEVEL: ERROR
          buildStepName: test_docker_build
#    preRun:
#      configuration:
#        integrations:
#          - name: int_default_artifactory
#      execution:
#        onExecute:
#          - task: jfrog/setup-go@latest
#            input:
#              version: 1.19.5
#    postRun:
#      configuration:
#        integrations:
#          - name: int_default_artifactory
#          - name: {{ .Values.statusPage.integration }}
#      execution:
#        onExecute:
#          - echo $TASK_VERSION_TEST
#          - echo $TASK_VERSION_DEF
#          - task: jfrog/run-status@latest
#            id: pipe_run
#            input:
#              stepFailure: false
#        onSuccess:
#          - task: jfrog/update-incident@v0.0.1
#            id: update_incident
#            condition: ${OUT_pipe_run_status} == "success"
#            input:
#              apiKeysIntegration: {{ .Values.statusPage.integration }}
#              componentID: {{ .Values.statusPage.componentId }}
#              pageID: {{ .Values.statusPage.pageId }}
#        onFailure:
#          - task: jfrog/create-incident@v0.0.1
#            id: create_incident
#            condition: ${OUT_pipe_run_status} == "failure"
#            input:
#              apiKeysIntegration: {{ .Values.statusPage.integration }}
#              componentID: {{ .Values.statusPage.componentId }}
#              pageID: {{ .Values.statusPage.pageId }}
    steps:
      - name: test_go_build_and_publish
        type: Bash
        configuration:
          inputResources:
            - name: go_app_gitrepo
            - name: go_build_gitrepo
            - name: go_publish_gitrepo
            - name: go_build_publish_gitrepo
            - name: saveCache
            - name: retrieveCache
          outputResources:
            - name: docker_build_info
          integrations:
            - name: int_default_artifactory
        execution:
          onStart:
            - jf c show
            - echo $IS_K8S_BUILD_PLANE
            - echo "test"
            - echo $run_id
            - hostname=`echo $step_url | cut -d / -f3`
            - echo $hostname
            - >-
              pipelineId=`curl https://$hostname/pipelines/api/v1/steps/$step_id --header "Authorization: Bearer $builder_api_token" | jq .pipelineId`
            - >-
              pipelineSourceBranch=`curl https://$hostname/pipelines/api/v1/pipelines/$pipelineId --header "Authorization: Bearer $builder_api_token" | jq .pipelineSourceBranch`
            - echo $pipelineSourceBranch
            - task: jfrog/setup-go@v0.1.0
              input:
                version: 1.19.5
          onExecute:
            - TASK_VERSION_TEST="test"
            - echo $TASK_VERSION_TEST
            - TASK_VERSION_DEF="def"
            - echo $TASK_VERSION_DEF
            - add_run_variables "TASK_VERSION_DEF=${IS_K8S_BUILD_PLANE}"
            - add_run_variables TASK_VERSION_TEST="test"
            - go version
            - which go
            - task: jfrog/setup-go@latest
              id: install-go
              input:
                version: 1.19.5
            - echo $GOPATH
            - echo $GOMODCACHE
            - echo {{gitBranch}}
            - task: $res_retrieveCache_resourcePath
              id: retrieve-go-cache
              input:
                gitResourceName: go_app_gitrepo
                keyStrategy: checksum
                pathToDependencies: $GOPATH/pkg/mod
                cacheRepository: cache-local
                language: go
            - ls /root/go/pkg/mod/
            - task: $res_go_build_gitrepo_resourcePath
              repository: pipelines-tasks-virtual
              id: go_build_task
              input:
                resourceName: go_app_gitrepo
                executionLocation: ""
                resolveRepository: go-virtual
                outputLocation: ${step_tmp_dir}
                outputFile: myapp
                rtIntegrationName: int_default_artifactory
                goCommand: "go build -o myapp -modcacherw"
            - task: $res_saveCache_resourcePath
              repository: pipelines-tasks-virtual
              id: save-go-cache
              input:
                gitResourceName: go_app_gitrepo
                keyStrategy: checksum
                pathToDependencies: $GOPATH/pkg/mod/
                rtIntegration: int_default_artifactory
                cacheRepository: cache-local
                language: go
            - task: $res_go_publish_gitrepo_resourcePath
              repository: pipelines-tasks-virtual
              id: go_publish_task
              input:
                targetRepository: go-local
            - task: $res_go_build_publish_gitrepo_resourcePath
              id: maven-publish-task
              input:
                resourceName: go_build_gitrepo
                sourceLocation: ""
                autoPublishBuildInfo: true
                xrayScan: true
                failOnScan:
                retry: true
      - name: test_xray_scan
        type: Bash
        configuration:
          inputResources:
            - name: xrayScanTask
            - name: docker_build_info
          integrations:
            - name: int_default_artifactory
          inputSteps:
            - name: test_go_build_and_publish
          outputResources:
            - name: xray_scan_info
        execution:
          onStart:
            - echo $res_docker_build_info_buildName
            - echo $res_docker_build_info_buildNumber
            - buildName=$(find_resource_variable "docker_build_info" buildName)
            - echo $buildName
            - echo "Running xray scan task"
            - echo "test pde commit"
            - jf c show
          onExecute:
            - task: $res_xrayScanTask_resourcePath
              id: my-awesome-task
              input:
                buildInfoResource: docker_build_info
                outputResources: xray_scan_info
                failOnScan: true
      - name: test_docker_build
        type: Bash
        configuration:
          inputResources:
            - name: go_app_gitrepo
            - name: go_build_gitrepo
            - name: go_publish_gitrepo
            - name: go_build_publish_gitrepo
          outputResources:
            - name: docker_build_info
          integrations:
            - name: int_default_artifactory
          inputSteps:
            - name: test_go_build_and_publish
        execution:
          onStart:
            - jf c show
            - echo $IS_K8S_BUILD_PLANE
          onExecute:
            - write_output docker_build_info buildName=${JFROG_CLI_BUILD_NAME} buildNumber=${JFROG_CLI_BUILD_NUMBER}
            - task: jfrog/setup-go@v0.1.0
              repository: pipelines-tasks-virtual
              id: install-go
              input:
                version: 1.19.5
            - task: $res_go_build_gitrepo_resourcePath
              repository: pipelines-tasks-virtual
              id: go_build_task
              input:
                resourceName: go_app_gitrepo
                executionLocation: ""
                resolveRepository: go-virtual
                outputLocation: ${step_tmp_dir}
                outputFile: myapp
                rtIntegrationName: int_default_artifactory
                goCommand: ""
            - task: $res_go_publish_gitrepo_resourcePath
              repository: pipelines-tasks-virtual
              id: go_publish_task
              input:
                targetRepository: go-local
            - task: $res_go_build_publish_gitrepo_resourcePath
              id: maven-publish-task
              input:
                resourceName: go_build_gitrepo
                sourceLocation: ""
                autoPublishBuildInfo: true
                xrayScan: true
                failOnScan:
                retry: true
            - task: jfrog/docker-build@v0.0.1
              repository: pipelines-tasks-virtual
              id: docker_build_go_app
              input:
                resourceName: go_app_gitrepo
                dockerImage: "pipelineslnp1.jfrogdev.org/pipelines-docker/go-app:latest"
            - task: jfrog/docker-push@v0.0.2
              repository: pipelines-tasks-virtual
              id: docker_push_go_app
              input:
                dockerImage: "pipelineslnp1.jfrogdev.org/pipelines-docker/go-app:latest"
                autoPublishBuildInfo: "true"
                xrayScan: "true"
                failOnScan: "false"
                outputBuildInfoResourceName: "docker_build_info"
  - name: test_go_app_build_publish
    configuration:
      jfrogCliVersion: 2
      environmentVariables:
        readOnly:
          TASK_NAME: docker_build
          TASK_VERSION: 0.0.1
          TASK_REPOSITORY: pipelines-tasks-local
          JFROG_TASK_DEBUG: "true"
          JFROG_CLI_LOG_LEVEL: debug
          buildStepName: test_docker_build
    steps:
#       - name: test_go_build_and_publish
#         type: Bash
#         configuration:
#           inputResources:
#             - name: go_app_gitrepo
#             - name: go_build_gitrepo
#             - name: go_publish_gitrepo
#             - name: go_build_publish_gitrepo
#           outputResources:
#             - name: docker_build_info
#           integrations:
#             - name: int_default_artifactory
#           inputSteps:
#             - name: test_docker_build
#         execution:
#           onStart:
#             - jf c show
#             - echo $IS_K8S_BUILD_PLANE
#           onExecute:
#             - invoke_task --name jfrog/setup-go@v0.1.0 --repository pipelines-tasks-virtual --id install-go --arg version=1.19.5
#             - go version
#             - which go
# #            - task: jfrog/setup-go@v0.1.0
# #              repository: pipelines-tasks-virtual
# #              id: install-go
# #              input:
# #                version: 1.19.5
#             - task: $res_go_build_gitrepo_resourcePath
#               repository: pipelines-tasks-virtual
#               id: go_build_task
#               input:
#                 resourceName: go_app_gitrepo
#                 executionLocation: ""
#                 resolveRepository: go-virtual
#                 outputLocation: ${step_tmp_dir}
#                 outputFile: myapp
#                 rtIntegrationName: int_default_artifactory
#                 goCommand: ""
#             - task: $res_go_publish_gitrepo_resourcePath
#               repository: pipelines-tasks-virtual
#               id: go_publish_task
#               input:
#                 targetRepository: go-local
#            - task: $res_go_build_publish_gitrepo_resourcePath
#              id: maven-publish-task
#              input:
#                resourceName: go_build_gitrepo
#                sourceLocation: ""
#                autoPublishBuildInfo: true
#                xrayScan: true
#                failOnScan:
#                retry: true
      - name: test_docker_build
        type: Bash
        configuration:
          inputResources:
            - name: go_app_gitrepo
            - name: go_build_gitrepo
            - name: go_publish_gitrepo
            - name: go_build_publish_gitrepo
          outputResources:
            - name: docker_build_info
          integrations:
            - name: int_default_artifactory
        execution:
          onStart:
            - exit 1
            - jf c show
            - echo $IS_K8S_BUILD_PLANE
          onExecute:
            - task: jfrog/setup-go@v0.1.0
              repository: pipelines-tasks-virtual
              id: install-go
              input:
                version: 1.19.5
#            - task: $res_go_build_gitrepo_resourcePath
#              repository: pipelines-tasks
#              rtIntegration: int_artifactory
#              id: go_build_task
#              input:
#                resourceName: go_app_gitrepo
#                executionLocation: ""
#                resolveRepository: go-virtual
#                outputLocation: ${step_tmp_dir}
#                outputFile: myapp
#                rtIntegrationName: int_default_artifactory
#                goCommand: ""
#            - task: $res_go_publish_gitrepo_resourcePath
#              repository: pipelines-tasks-virtual
#              id: go_publish_task
#              input:
#                targetRepository: go-local
#            - task: $res_go_build_publish_gitrepo_resourcePath
#              id: maven-publish-task
#              input:
#                resourceName: go_build_gitrepo
#                sourceLocation: ""
#                autoPublishBuildInfo: true
#                xrayScan: true
#                failOnScan:
#                retry: true
            - task: jfrog/docker-build@v0.0.1
              repository: pipelines-tasks-local
              id: docker_build_go_app
              input:
                resourceName: "go_app_gitrepo"
                dockerImage: "pipelineslnp1.jfrogdev.org/pipelines-docker/go-app:latest"
            - task: jfrog/docker_push@v0.0.3
              repository: pipelines-tasks-local
              id: docker_push_go_app
              input:
                dockerImage: "pipelineslnp1.jfrogdev.org/pipelines-docker/go-app:latest"
                autoPublishBuildInfo: "true"
                xrayScan: "true"
                outputBuildInfoResourceName: "docker_build_info"
  - name: test_status_page_tasks
    configuration:
      jfrogCliVersion: 2
      environmentVariables:
        readOnly:
          TASK_NAME: docker_build
          TASK_VERSION: 0.0.1
          TASK_REPOSITORY: pipelines-tasks-local
          JFROG_TASK_DEBUG: "true"
          JFROG_CLI_LOG_LEVEL: ERROR
          buildStepName: test_docker_build
    postRun:
      configuration:
        integrations:
          - name: int_default_artifactory
          - name: {{ .Values.statusPage.integration }}
      execution:
        onExecute:
          - echo $TASK_VERSION_TEST
          - echo $TASK_VERSION_DEF
          - task: jfrog/run-status@latest
            id: pipe_run
            input:
              stepFailure: true
        onSuccess:
          - task: jfrog/update-incident@v0.0.1
            id: update_incident
            condition: ${OUT_pipe_run_status} == "success"
            input:
              apiKeysIntegration: {{ .Values.statusPage.integration }}
              componentID: {{ .Values.statusPage.componentId }}
              pageID: {{ .Values.statusPage.pageId }}
        onFailure:
          - task: jfrog/create-incident@v0.0.1
            id: create_incident
            condition: ${OUT_pipe_run_status} == "failure"
            input:
              apiKeysIntegration: {{ .Values.statusPage.integration }}
              componentID: {{ .Values.statusPage.componentId }}
              pageID: {{ .Values.statusPage.pageId }}
    steps:
      - name: test_status_page_step_1
        type: Bash
        configuration:
          integrations:
            - name: int_default_artifactory
        execution:
          onStart:
            - echo "Running Sample Step 1"
            - jf c show
          onExecute:
            - echo "executed step 1"
      - name: test_status_page_step_2
        type: Bash
        configuration:
          integrations:
            - name: int_default_artifactory
          inputSteps:
            - name: test_status_page_step_1
          inputResources:
            - name: go_app_gitrepo
        execution:
          onStart:
            - exit 1
            - echo "Running Sample Step 2"
            - jf c show
          onExecute:
            - echo "executed step 2"
            - exit 1
